@page "/people/delete"
@inject Financias.Models.PeopleContext DB
@using Financias.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>People</h4>
    <hr />
    @if (people is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@people.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@people.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@people.Phone</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StartOfHosting</dt>
            <dd class="col-sm-10">@people.StartOfHosting</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EndOfHosting</dt>
            <dd class="col-sm-10">@people.EndOfHosting</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@people.Price</dd>
        </dl>
        <EditForm method="post" Model="people" OnValidSubmit="DeletePeople" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(people is null)">Delete</button> |
            <a href="/people">Back to List</a>
        </EditForm>
    }
</div>

@code {
    People? people;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        people = await DB.People.FirstOrDefaultAsync(m => m.Id == Id);

        if (people is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeletePeople()
    {
        DB.People.Remove(people!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/people");
    }
}
